name: CAPSTONE: Full End-to-End CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  # --- 1. PROVISION INFRASTRUCTURE (IaC) ---
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.9

      - name: Terraform Init and Apply
        id: apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve -var="key_name=${{ secrets.SSH_KEY_NAME }}"
        
      - name: Get Server Public IP
        id: output
        run: |
          cd terraform
          # Retrieve the Public IP output defined in main.tf
          SERVER_IP=$(terraform output -json server_public_ip | jq -r .)
          echo "SERVER_IP=$SERVER_IP" >> $GITHUB_OUTPUT

    outputs:
      server_ip: ${{ steps.output.outputs.SERVER_IP }}
      
  # --- 2. BUILD, TEST, & PUSH IMAGE (CI) ---
  build_and_push:
    runs-on: ubuntu-latest
    needs: provision # Can run parallel to configuration
    steps:
      - name: Checkout Application Code
        uses: actions/checkout@v4
        with:
          path: application

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: application
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/capstone-flask-app:latest
          
  # --- 3. CONFIGURE SERVER (Ansible) ---
  configure_server:
    runs-on: ubuntu-latest
    needs: provision
    steps:
      - name: Checkout Configuration Files
        uses: actions/checkout@v4
        
      - name: Install Ansible
        run: pip install ansible
        
      - name: Run Ansible Playbook (Install Docker Reliably)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.provision.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          # This executes the setup_docker.yml playbook remotely via SSH
          script: |
            echo "--- Starting Configuration Management (Ansible) ---"
            
            # Install necessary packages (git for cloning repo, Python is usually default)
            sudo apt update && sudo apt install -y git python3-pip
            
            # Clone the repository onto the EC2 instance
            git clone https://github.com/${{ github.repository }}.git /tmp/repo
            
            # Execute the Ansible playbook locally on the EC2 instance
            # --connection=local tells Ansible to manage the machine it's running on
            sudo /usr/bin/python3 -m pip install ansible
            sudo /usr/local/bin/ansible-playbook /tmp/repo/ansible/setup_docker.yml \
              --connection=local --inventory 127.0.0.1, \
              -e "ansible_python_interpreter=/usr/bin/python3"
            
            echo "Ansible configuration complete."
            
  # --- 4. DEPLOY APPLICATION (CD) ---
  deploy:
    runs-on: ubuntu-latest
    needs: [configure_server, build_and_push] # Waits for configuration AND image build
    steps:
      - name: Deploy Docker Container via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.provision.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          script: |
            echo "--- Starting Final Application Deployment ---"
            
            IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/capstone-flask-app:latest
            
            # Stop and remove old container safely
            /usr/bin/docker stop capstone-flask-app || true 
            /usr/bin/docker rm capstone-flask-app || true
            
            # Pull and run the image
            /usr/bin/docker run -d \
              --name capstone-flask-app \
              -p 80:5000 \
              $IMAGE_TAG
            
            echo "Deployment to EC2 complete. Application is live."